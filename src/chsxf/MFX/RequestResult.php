<?php

/**
 * Request response data and information structure
 * 
 * @author Christophe SAUVEUR <chsxf.pro@gmail.com>
 */

namespace chsxf\MFX;

/**
 * Class holding data and information about the request response
 */
final class RequestResult
{
	/**
	 * @var array Global data to be passed with all VIEW request results
	 */
	private static array $_viewGlobalData = array();

	/**
	 * @var RequestResultType Request result type
	 */
	private RequestResultType $_type;
	/**
	 * @var string Template to use as the response renderer.
	 */
	private ?string $_template;
	/**
	 * @var mixed Response data holder
	 */
	private mixed $_data;
	/**
	 * @var string Redirection target URI container
	 */
	private ?string $_redirectURI;
	/**
	 * @var int HTTP status code of the response
	 */
	private int $_statusCode;
	/**
	 * @var boolean Flag indicating if the XML and JSON data are preformatted or not
	 */
	private bool $_preformatted;

	/**
	 * Constructor
	 * 
	 * Some parameters, such as $template, may be automatically defined in the route function attributes
	 * but can be overridden through this constructor if needed.
	 * 
	 * @param RequestResultType $type Request result type. If NULL, the type defaults to VIEW. (Defaults to NULL)
	 * @param mixed $data Response data. If a view, $data must be an array. (Defaults to NULL)
	 * @param string $template Template to use as the response renderer. Don't add the .twig extension. Should be NULL if not a view. (Defaults to NULL)
	 * @param string $redirectURI Target URI to which redirect the user (Defaults to NULL)
	 * @param int $statusCode HTTP status code of the response (Defaults to 200 - OK).
	 * @param boolean $preformatted If set, this flag indicates that $data is preformatted for XML and JSON responses. (Defaults to false)
	 * 
	 * @see RequestResultType
	 */
	public function __construct(?RequestResultType $type = NULL, mixed $data = NULL, ?string $template = NULL, ?string $redirectURI = NULL, int $statusCode = 200, bool $preformatted = false)
	{
		$this->_type = ($type ?? RequestResultType::VIEW);
		$this->_template = $template;
		$this->_data = ($this->_type === RequestResultType::VIEW && !is_array($data)) ? array() : $data;
		$this->_redirectURI = $redirectURI;
		$this->_statusCode = $statusCode;
		$this->_preformatted = !empty($preformatted);
	}

	/**
	 * Gets the request result type
	 * @return RequestResultType
	 */
	public function type(): RequestResultType
	{
		return $this->_type;
	}

	/**
	 * Gets the template to use as the response renderer
	 * @param string $defaultValue Default template name if none provided. Don't add the .twig extension. (Defaults to NULL)
	 * @return string
	 */
	public function template(?string $defaultValue = NULL): string
	{
		return (empty($this->_template) ? $defaultValue : $this->_template) . '.twig';
	}

	/**
	 * Gets the data generated by the response
	 * @return mixed
	 */
	public function data(): mixed
	{
		return $this->_data;
	}

	/**
	 * Gets the redirection URI if existing
	 * @return string
	 */
	public function redirectURI(): ?string
	{
		return $this->_redirectURI;
	}

	/**
	 * Gets the HTTP status code of the response
	 * @return int
	 */
	public function statusCode(): int
	{
		return $this->_statusCode;
	}

	/**
	 * Tells if the data is preformmated or not for XML and JSON repsonses
	 * @return boolean
	 */
	public function preformatted(): bool
	{
		return $this->_preformatted;
	}

	/**
	 * Add a VIEW global value
	 * @param string $name Name of the global value
	 * @param mixed $value Value
	 */
	public static function addViewGlobal(string $name, mixed $value)
	{
		self::$_viewGlobalData[$name] = $value;
	}

	/**
	 * Remove a VIEW global value
	 * @param string $name Name of the global to remove
	 */
	public static function removeViewGlobal(string $name)
	{
		unset(self::$_viewGlobalData[$name]);
	}

	/**
	 * Gets all VIEW global values
	 * @return array
	 */
	public static function getViewGlobals(): array
	{
		return self::$_viewGlobalData;
	}

	/**
	 * Helper function to build RequestResult instances for REDIRECT request results
	 * @param string $redirectURI Target URI to which redirect the user (Defaults to NULL)
	 * @return RequestResult
	 */
	public static function buildRedirectRequestResult(?string $redirectURI = NULL): RequestResult
	{
		return new RequestResult(RequestResultType::REDIRECT, NULL, NULL, $redirectURI);
	}

	/**
	 * Helper function to build RequestResult instances for erroneous responses, providing the HTTP status code
	 * @param int $statusCode HTTP status code of the response
	 * @param ?string $message Message
	 * @return RequestResult
	 */
	public static function buildStatusRequestResult(int $statusCode = 400, ?string $message = NULL): RequestResult
	{
		return new RequestResult(RequestResultType::STATUS, $message, NULL, NULL, $statusCode, true);
	}

	/**
	 * Helper function to build RequestResult instances for JSON responses
	 * @param mixed $data JSON data
	 * @param bool $preformatted If set, $data contains preformatted JSON data
	 * @param int $statusCode HTTP status code of the response
	 * @return RequestResult
	 */
	public static function buildJSONRequestResult(mixed $data, bool $preformatted = false, int $statusCode = 200): RequestResult
	{
		return new RequestResult(RequestResultType::JSON, $data, NULL, NULL, $statusCode, $preformatted);
	}

	/**
	 * Helper function to build RequestResult instances for XML responses
	 * @param mixed $data XML data
	 * @param bool $preformatted If set, $data contains preformatted XML data
	 * @param int $statusCode HTTP status code of the response
	 * @return RequestResult
	 */
	public static function buildXMLRequestResult(mixed $data, bool $preformatted = false, int $statusCode = 200): RequestResult
	{
		return new RequestResult(RequestResultType::XML, $data, NULL, NULL, $statusCode, $preformatted);
	}
}
