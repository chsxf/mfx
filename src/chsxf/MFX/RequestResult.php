<?php
/**
 * Request response data and information structure
 * 
 * @author Christophe SAUVEUR <chsxf.pro@gmail.com>
 */

namespace chsxf\MFX;

/**
 * Class holding data and information about the request response
 */
final class RequestResult
{
	/**
	 * @var array Global data to be passed with all VIEW request results
	 */
	private static $_viewGlobalData = array();
	
	/**
	 * @var SubRouteType Sub-route response type
	 */
	private $_type;
	/**
	 * @var string Template to use as the response renderer.
	 */
	private $_template;
	/**
	 * @var mixed Response data holder
	 */
	private $_data;
	/**
	 * @var string Redirection target URI container
	 */
	private $_redirectURI;
	/**
	 * @var int HTTP status code of the response
	 */
	private $_statusCode;
	/**
	 * @var boolean Flag indicating if the XML and JSON data are preformatted or not
	 */
	private $_preformatted;
	
	/**
	 * Constructor
	 * 
	 * Some parameter, such as $template, may be automatically defined in the sub-route function documentation comment
	 * but can be overridden through this constructor if needed.
	 * 
	 * @param SubRouteType $type Sub-route response type. If NULL, the type defaults to VIEW. (Defaults to NULL)
	 * @param mixed $data Response data. If a view, $data must be an array. (Defaults to NULL)
	 * @param string $template Template to use as the response renderer. Don't add the .twig extension. Should be NULL if not a view. (Defaults to NULL)
	 * @param string $redirectURI Target URI to which redirect the user (Defaults to NULL)
	 * @param int $statusCode HTTP status code of the response (Defaults to 200 - OK).
	 * @param boolean $preformatted If set, this flag indicates that $data is preformatted for XML and JSON responses. (Defaults to false)
	 * 
	 * @see SubRouteType
	 */
	public function __construct(SubRouteType $type = NULL, $data = NULL, $template = NULL, $redirectURI = NULL, $statusCode = 200, $preformatted = false)
	{
		$this->_type = ($type === NULL) ? new SubRouteType() : $type;
		$this->_template = $template;
		$this->_data = ($this->_type->equals(SubRouteType::VIEW) && !is_array($data)) ? array() : $data;
		$this->_redirectURI = $redirectURI;
		$this->_statusCode = $statusCode;
		$this->_preformatted = !empty($preformatted);
	}
	
	/**
	 * Gets the sub-route response type
	 * @return SubRouteType
	 */
	public function subRouteType() {
		return $this->_type;
	}
	
	/**
	 * Gets the template to use as the response renderer
	 * @param string $defaultValue Default template name if none provided. Don't add the .twig extension. (Defaults to NULL)
	 * @return string
	 */
	public function template($defaultValue = NULL) {
		return (empty($this->_template) ? $defaultValue : $this->_template) . '.twig';
	}
	
	/**
	 * Gets the data generated by the response
	 * @return mixed
	 */
	public function data() {
		return $this->_data;
	}
	
	/**
	 * Gets the redirection URI if existing
	 * @return string
	 */
	public function redirectURI() {
		return $this->_redirectURI;
	}
	
	/**
	 * Gets the HTTP status code of the response
	 * @return int
	 */
	public function statusCode() {
		return $this->_statusCode;
	}
	
	/**
	 * Tells if the data is preformmated or not for XML and JSON repsonses
	 * @return boolean
	 */
	public function preformatted() {
		return $this->_preformatted;
	}
	
	/**
	 * Add a VIEW global value
	 * @param string $name Name of the global value
	 * @param mixed $value Value
	 */
	public static function addViewGlobal($name, $value) {
		self::$_viewGlobalData[$name] = $value;
	}
	
	/**
	 * Remove a VIEW global value
	 * @param string $name Name of the global to remove
	 */
	public static function removeViewGlobal($name) {
		unset(self::$_viewGlobalData[$name]);
	}
	
	/**
	 * Gets all VIEW global values
	 * @return array
	 */
	public static function getViewGlobals() {
		return self::$_viewGlobalData;
	}
	
	/**
	 * Helper function to build RequestResult instances for REDIRECT sub-routes
	 * @param string $redirectURI Target URI to which redirect the user (Defaults to NULL)
	 * @return RequestResult
	 */
	public static function buildRedirectRequestResult($redirectURI = NULL) {
		return new RequestResult(new SubRouteType(SubRouteType::REDIRECT), NULL, NULL, $redirectURI);
	}
	
	/**
	 * Helper function to build RequestResult instances for erroneous responses, providing the HTTP status code
	 * @param int $statusCode HTTP status code of the response
	 * @param string $message Message
	 * @return RequestResult
	 */
	public static function buildStatusRequestResult($statusCode = 400, $message = NULL) {
		return new RequestResult(new SubRouteType(SubRouteType::STATUS), $message, NULL, NULL, $statusCode, true);
	}

	/**
	 * Helper function to build RequestResult instances for JSON responses
	 * @param mixed $data JSON data
	 * @param string $preformatted If set, $data contains preformatted JSON data
	 * @param int $statusCode HTTP status code of the response
	 * @return RequestResult
	 */
	public static function buildJSONRequestResult($data, $preformatted = false, $statusCode = 200) {
		return new RequestResult(new SubRouteType(SubRouteType::JSON), $data, NULL, NULL, $statusCode, $preformatted);
	}
	
	/**
	 * Helper function to build RequestResult instances for XML responses
	 * @param mixed $data XML data
	 * @param string $preformatted If set, $data contains preformatted XML data
	 * @param int $statusCode HTTP status code of the response
	 * @return RequestResult
	 */
	public static function buildXMLRequestResult($data, $preformatted = false, $statusCode = 200) {
		return new RequestResult(new SubRouteType(SubRouteType::XML), $data, NULL, NULL, $statusCode, $preformatted);
	}
}